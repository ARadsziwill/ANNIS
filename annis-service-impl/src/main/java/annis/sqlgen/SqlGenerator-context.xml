<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2009-2011 Collaborative Research Centre SFB 632 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	<!-- Properties configuration -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:${annis.home}/conf/annis-service.properties</value>
			</list>
		</property>
	</bean>


	<!-- Configure use of BETWEEN SYMMETRIC -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass">
			<value>annis.sqlgen.SqlConstraints</value>
		</property>
		<property name="targetMethod">
			<value>setDisableBetweenSymmetricPredicate</value>
		</property>
		<property name="arguments">
			<value>${annis.disable-between-symmetric-predicate}</value>
		</property>
	</bean>

	<!-- Configure BETWEEN workaround for MonetDB -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass">
			<value>annis.sqlgen.SqlConstraints</value>
		</property>
		<property name="targetMethod">
			<value>setDisableBetweenPredicate</value>
		</property>
		<property name="arguments">
			<value>${annis.disable-between-predicate}</value>
		</property>
	</bean>

	<!-- FROM clause generator -->
	<bean id="tableJoinsInFromClauseSqlGenerator" class="annis.sqlgen.TableJoinsInFromClauseSqlGenerator"
		parent="tableAccessStrategyFactory" />

	<bean id="tableJoinsInWhereClauseGenerator" class="annis.sqlgen.TableJoinsInWhereClauseGenerator"
		parent="tableAccessStrategyFactory" />

	<!-- WHERE clause generator -->
	<bean id="defaultWhereClauseGenerator" class="annis.sqlgen.DefaultWhereClauseGenerator"
		parent="tableAccessStrategyFactory">
		<property name="optimizeIndirectPrecedence" value="${annis.optimize-indirect-precedence}" />
		<property name="allowIdenticalSibling" value="${annis.allow-identical-sibling}" />
		<property name="optimizeInclusion" value="${annis.optimize-inclusion}" />
		<property name="componentPredicates" value="${annis.component-predicates}" />
		<property name="useIsTokenColumn" value="${annis.use-is-token-column}" />
		<property name="useComponentRefPredicateInCommonAncestorSubquery" value="${annis.use-component-ref-predicate-in-common-ancestor-subquery}"/>
		<property name="useToplevelCorpusPredicateInCommonAncestorSubquery" value="${annis.use-toplevel-corpus-predicate-in-common-ancestor-subquery}"/>
	</bean>

	<bean id="subcorpusConstraintWhereClause" class="annis.sqlgen.SubcorpusConstraintWhereClause"
		parent="tableAccessStrategyFactory" />

	<bean id="sampleWhereClause" class="annis.sqlgen.SampleWhereClause"
		parent="tableAccessStrategyFactory" />

	<bean id="metaDataAndCorpusWhereClauseGenerator" class="annis.sqlgen.MetaDataAndCorpusWhereClauseGenerator"
		parent="tableAccessStrategyFactory" />

	<util:map id="factsTableAliases">
		<entry key="node" value="facts" />
		<entry key="node_annotation" value="facts" />
		<entry key="rank" value="facts" />
		<entry key="component" value="facts" />
		<entry key="edge_annotation" value="facts" />
	</util:map>

	<util:map id="factsColumnAliases">
		<entry key="node">
			<util:map>
				<entry key="name" value="node_name" />
				<entry key="namespace" value="node_namespace" />
			</util:map>
		</entry>
		<entry key="rank">
			<util:map>
				<entry key="component_ref" value="component_id" />
				<entry key="node_ref" value="id" />
			</util:map>
		</entry>
		<entry key="node_annotation">
			<util:map>
				<entry key="node_ref" value="node_ref" />
				<entry key="namespace" value="node_annotation_namespace" />
				<entry key="name" value="node_annotation_name" />
				<entry key="value" value="node_annotation_value" />
			</util:map>
		</entry>
		<entry key="component">
			<util:map>
				<entry key="name" value="edge_name" />
				<entry key="type" value="edge_type" />
				<entry key="namespace" value="edge_namespace" />
			</util:map>
		</entry>
		<entry key="edge_annotation">
			<util:map>
				<entry key="namespace" value="edge_annotation_namespace" />
				<entry key="name" value="edge_annotation_name" />
				<entry key="value" value="edge_annotation_value" />
			</util:map>
		</entry>
		<entry key="facts">
			<util:map>
				<entry key="node_annotation_namespace" value="node_annotation_namespace" />
				<entry key="node_annotation_name" value="node_annotation_name" />
				<entry key="node_annotation_value" value="node_annotation_value" />
				<entry key="edge_annotation_namespace" value="edge_annotation_namespace" />
				<entry key="edge_annotation_name" value="edge_annotation_name" />
				<entry key="edge_annotation_value" value="edge_annotation_value" />
			</util:map>
		</entry>
	</util:map>

	<util:map id="emptyTableAliases" />

	<util:map id="emptyColumnAliases" />

	<bean id="tableAccessStrategy" class="annis.sqlgen.TableAccessStrategy"
		scope="prototype">

		<property name="tableAliases" ref="factsTableAliases" />
		<property name="columnAliases" ref="factsColumnAliases" />

	</bean>

	<bean id="tableAccessStrategyFactory" class="annis.sqlgen.TableAccessStrategyFactory">

		<lookup-method name="createTableAccessStrategy" bean="tableAccessStrategy" />
	</bean>

	<bean id="subQueryCorpusSelectionStrategy" class="annis.sqlgen.SubQueryCorpusSelectionStrategy" />


	<!-- new -->

	<bean id="matrixSqlGenerator" class="annis.sqlgen.MatrixSqlGenerator"
		parent="tableAccessStrategyFactory">

		<property name="innerQuerySqlGenerator" ref="findSqlGenerator" />
		<property name="tableJoinsInFromClauseGenerator" ref="tableJoinsInFromClauseSqlGenerator" />

		<property name="selectClauseSqlGenerator" ref="matrixSqlGenerator" />
		<property name="fromClauseSqlGenerators">
			<util:list>
				<ref bean="matrixSqlGenerator" />
			</util:list>
		</property>
		<property name="whereClauseSqlGenerators">
			<util:list>
				<ref bean="matrixSqlGenerator" />
			</util:list>
		</property>
		<property name="groupByClauseSqlGenerator" ref="matrixSqlGenerator" />
	</bean>

  <bean id="postgreSqlArraySolutionKey" class="annis.sqlgen.PostgreSqlArraySolutionKey" scope="prototype">
    <property name="idColumnName" value="${annis.node-id-column-name}"/>
    <property name="keyColumnName" value="key"/>
  </bean>

  <bean id="nodeNameAndIdPostgreSqlAndIdSolutionKey" class="annis.sqlgen.NodeNameAndIdPostgreSqlArraySolutionKey" scope="prototype"/>

	<bean id="annotateInnerQuerySqlGenerator" class="annis.sqlgen.AnnotateInnerQuerySqlGenerator"
		parent="tableAccessStrategyFactory">

		<property name="sortSolutions" value="${annis.annotate.sort-solutions}" />

    <property name="solutionKey" ref="postgreSqlArraySolutionKey"/>
		<property name="selectClauseSqlGenerator" ref="annotateInnerQuerySqlGenerator" />
		<property name="fromClauseSqlGenerators" ref="defaultFromClauseGenerators" />
		<property name="whereClauseSqlGenerators" ref="defaultWhereClauseGenerators" />
		<property name="orderByClauseSqlGenerator" ref="annotateInnerQuerySqlGenerator" />
		<property name="limitOffsetClauseSqlGenerator" ref="annotateInnerQuerySqlGenerator" />
	</bean>

	<bean id="annotateSqlGenerator" class="annis.sqlgen.AnnotateSqlGenerator"
		parent="tableAccessStrategyFactory">
		
		<lookup-method name="createSolutionKey" bean="postgreSqlArraySolutionKey"/>

		<property name="defaultIslandsPolicy" value="${annis.default-islands-policy}" />

		<property name="optimizeOverlap" value="${annis.annotate.optimize-overlap}" />
    <property name="includeIsTokenColumn" value="${annis.use-is-token-column}" />
		<property name="includeDocumentNameInAnnotateQuery" value="${annis.include-document-name-in-annotate-query}"/>

		<property name="innerQuerySqlGenerator" ref="annotateInnerQuerySqlGenerator" />
		<property name="tableJoinsInFromClauseSqlGenerator" ref="tableJoinsInFromClauseSqlGenerator" />

		<property name="selectClauseSqlGenerator" ref="annotateSqlGenerator" />
		<property name="fromClauseSqlGenerators">
			<util:list>
				<ref bean="annotateSqlGenerator" />
			</util:list>
		</property>
		<property name="whereClauseSqlGenerators">
			<util:list>
				<ref bean="annotateSqlGenerator" />
			</util:list>
		</property>
		<property name="orderByClauseSqlGenerator" ref="annotateSqlGenerator" />

	</bean>

	<bean id="aomAnnotateSqlGenerator" class="annis.sqlgen.AomAnnotateSqlGenerator"
		parent="annotateSqlGenerator">
	</bean>

	<bean id="saltAnnotateSqlGenerator" class="annis.sqlgen.SaltAnnotateSqlGenerator"
		parent="annotateSqlGenerator">
	</bean>

	<util:list id="defaultFromClauseGenerators">
		<ref bean="tableJoinsInWhereClauseGenerator" />
	</util:list>

	<util:list id="defaultWhereClauseGenerators">
		<ref bean="tableJoinsInWhereClauseGenerator" />
		<ref bean="defaultWhereClauseGenerator" />
		<ref bean="subcorpusConstraintWhereClause" />
		<ref bean="metaDataAndCorpusWhereClauseGenerator" />
		<ref bean="sampleWhereClause" />
	</util:list>

	<bean id="findSqlGenerator" class="annis.sqlgen.FindSqlGenerator"
		parent="tableAccessStrategyFactory">

		<property name="optimizeDistinct" value="${annis.optimize-distinct}" />

		<property name="selectClauseSqlGenerator" ref="findSqlGenerator" />

		<property name="fromClauseSqlGenerators" ref="defaultFromClauseGenerators" />
		<property name="whereClauseSqlGenerators" ref="defaultWhereClauseGenerators" />
	</bean>

	<bean id="countSqlGenerator" class="annis.sqlgen.CountSqlGenerator"
		parent="tableAccessStrategyFactory">

		<property name="selectClauseSqlGenerator" ref="countSqlGenerator" />

		<property name="findSqlGenerator" ref="findSqlGenerator" />

		<property name="fromClauseSqlGenerators">
			<util:list>
				<ref bean="countSqlGenerator" />
			</util:list>
		</property>

		<property name="whereClauseSqlGenerators">
			<util:list />
		</property>
	</bean>

</beans>
