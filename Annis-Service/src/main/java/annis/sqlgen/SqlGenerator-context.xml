<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">
	
	<!-- Properties configuration -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>file:${annis.home}/conf/annis-service.properties</value>
      </list>
    </property>
  </bean>
	
	<!-- transforms a DDDquery into its disjunctive normal form -->	
  <bean id="dnfTransformer" class="annis.sqlgen.DnfTransformer"/>
	
	<!-- analyzes a single clause of a DDDquery -->
  <bean id="clauseAnalysis" class="annis.sqlgen.ClauseAnalysis" scope="prototype">
    <property name="precedenceBound" value="${annis.precedence-restriction}"/>
  </bean>
	
	<!-- SELECT clause generator -->
  <bean id="findMatchesSelectClauseSqlGenerator" class="annis.sqlgen.FindMatchesSelectClauseSqlGenerator">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>
	
	<!-- FROM clause generator -->
  <bean id="tableJoinsInFromClauseSqlGenerator" class="annis.sqlgen.TableJoinsInFromClauseSqlGenerator">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>

  <bean id="tableJoinsInWhereClauseSqlGenerator" class="annis.sqlgen.TableJoinsInWhereClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
	</bean>

  <bean id="nodeFromClauseSqlGenerator" class="annis.sqlgen.NodeFromClauseSqlGenerator">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>
	
	<!-- WHERE clause generator -->
  <bean id="defaultWhereClauseSqlGenerator" class="annis.sqlgen.DefaultWhereClauseSqlGenerator">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>

  <bean id="existsWhereClauseSqlGenerator" class="annis.sqlgen.ExistsWhereClauseSqlGenerator">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>

  <bean id="subcorpusConstraintWhereClause" class="annis.sqlgen.SubcorpusConstraintWhereClause">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>
	
  <bean id="metaDataAndCorpusWhereClause" class="annis.sqlgen.MetaDataAndCorpusWhereClause">
    <property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
  </bean>

  <!-- generates a SQL statement for a single clause -->
  <bean id="findClauseSqlGenerator" class="annis.sqlgen.ClauseSqlGenerator">
    <property name="selectClauseSqlGenerators">
      <util:list>
        <ref bean="findMatchesSelectClauseSqlGenerator"/>
      </util:list>
    </property>
    <property name="fromClauseSqlGenerators">
      <util:list>
        <ref bean="tableJoinsInWhereClauseSqlGenerator"/>
      </util:list>
    </property>
    <property name="whereClauseSqlGenerators">
      <util:list>
        <ref bean="tableJoinsInWhereClauseSqlGenerator" />
        <ref bean="defaultWhereClauseSqlGenerator"/>
        <!--<ref bean="subcorpusConstraintWhereClause"/>-->
        <ref bean="metaDataAndCorpusWhereClause" />
      </util:list>
    </property>
  </bean>
	
  <util:map id="tableAliases">
    <entry key="node" value="node"/>
    <entry key="node_annotation" value="node_annotation"/>
    <entry key="rank" value="facts"/>
    <entry key="component" value="facts"/>
    <entry key="edge_annotation" value="facts"/>
  </util:map>
	
  <util:map id="columnAliases">
    <entry key="rank">
      <util:map>
        <entry key="component_ref" value="component_id"/>
        <entry key="node_ref" value="id"/>
      </util:map>
    </entry>
    <entry key="node_annotation">
      <util:map>
        <entry key="node_ref" value="node_ref"/>
        <entry key="node_annotation_namespace" value="namespace"/>
        <entry key="node_annotation_name" value="name"/>
        <entry key="node_annotation_value" value="value"/>
      </util:map>
    </entry>
    <entry key="component">
      <util:map>
        <entry key="name" value="edge_name"/>
        <entry key="type" value="edge_type"/>
        <entry key="namespace" value="edge_namespace"/>
      </util:map>
    </entry>
    <entry key="edge_annotation">
      <util:map>
        <entry key="namespace" value="edge_annotation_namespace"/>
        <entry key="name" value="edge_annotation_name"/>
        <entry key="value" value="edge_annotation_value"/>
      </util:map>
    </entry>
    <entry key="facts">
      <util:map>
        <entry key="node_annotation_namespace" value="node_annotation_namespace"/>
        <entry key="node_annotation_name" value="node_annotation_name"/>
        <entry key="node_annotation_value" value="node_annotation_value"/>
        <entry key="edge_annotation_namespace" value="edge_annotation_namespace"/>
        <entry key="edge_annotation_name" value="edge_annotation_name"/>
        <entry key="edge_annotation_value" value="edge_annotation_value"/>
      </util:map>
    </entry>
  </util:map>
	
  <bean id="tableAccessStrategy" class="annis.sqlgen.TableAccessStrategy" scope="prototype">
    <property name="tableAliases" ref="tableAliases"/>
    <property name="columnAliases" ref="columnAliases"/>
  </bean>

  <bean id="defaultTableAccessStrategy" class="annis.sqlgen.DefaultTableAccessStrategy">
    <property name="tableAliases" ref="tableAliases"/>
    <property name="columnAliases" ref="columnAliases"/>
  </bean>

  <bean id="tableAccessStrategyFactory" class="annis.sqlgen.TableAccessStrategyFactory" >
    <lookup-method name="createTableAccessStrategy" bean="defaultTableAccessStrategy"/>
  </bean>


  <bean id="subQueryCorpusSelectionStrategy" class="annis.sqlgen.SubQueryCorpusSelectionStrategy"/>
	
  <bean id="queryAnalysis" class="annis.ql.parser.QueryAnalysis">
    <property name="dnfTransformer" ref="dnfTransformer"/>
    <lookup-method name="getClauseAnalysis" bean="clauseAnalysis"/>
  </bean>
	
	<!-- SqlGenerator: generates a SQL statement for a DDDquery -->
  <bean id="findSqlGenerator" class="annis.sqlgen.SqlGenerator">
    <qualifier value="find"/>
    <property name="clauseSqlGenerator" ref="findClauseSqlGenerator"/>
  </bean>
	
</beans>
