<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">
	
	<!-- transforms a DDDquery into its disjunctive normal form -->	
	<bean id="dnfTransformer" class="annis.sqlgen.DnfTransformer"/>
	
	<!-- analyzes a single clause of a DDDquery -->
	<bean id="clauseAnalysis" class="annis.sqlgen.ClauseAnalysis" scope="prototype">
		<property name="precedenceBound" value="50"/>
	</bean>
	
	<!-- SELECT clause generator -->
	<bean id="findMatchesSelectClauseSqlGenerator" class="annis.sqlgen.FindMatchesSelectClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
	</bean>
	
	<!-- FROM clause generator -->
	<bean id="tableJoinsInFromClauseSqlGenerator" class="annis.sqlgen.TableJoinsInFromClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
	</bean>
	
	<bean id="tableJoinsInWhereClauseSqlGenerator" class="annis.sqlgen.TableJoinsInWhereClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
	</bean>
	
	<!-- WHERE clause generator -->
	<bean id="defaultWhereClauseSqlGenerator" class="annis.sqlgen.DefaultWhereClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
	</bean>
	
	<bean id="corpusSelectionInWhereClauseSqlGenerator" class="annis.sqlgen.CorpusSelectionInWhereClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
		<property name="subQueryCorpusSelectionStrategy" ref="subQueryCorpusSelectionStrategy"/>
	</bean>
	
	<bean id="countClauseSqlGenerator" parent="findClauseSqlGenerator">
		<property name="selectClauseSqlGenerators">
			<util:list>
				<ref bean="countMatchesSelectClauseSqlGenerator"/>
			</util:list>
		</property>
	</bean>
	
	<bean id="countMatchesSelectClauseSqlGenerator" class="annis.sqlgen.CountMatchesSelectClauseSqlGenerator">
		<property name="tableAccessStrategyFactory" ref="tableAccessStrategyFactory"/>
	</bean>
	
	<!-- generates a SQL statement for a single clause -->
	<bean id="findClauseSqlGenerator" class="annis.sqlgen.ClauseSqlGenerator">
		<property name="selectClauseSqlGenerators">
			<util:list>
				<ref bean="findMatchesSelectClauseSqlGenerator"/>
			</util:list>
		</property>
		<property name="fromClauseSqlGenerators">
			<util:list>
				<ref bean="tableJoinsInFromClauseSqlGenerator"/>
			</util:list>
		</property>
		<property name="whereClauseSqlGenerators">
			<util:list>
				<ref bean="defaultWhereClauseSqlGenerator"/>
			</util:list>
		</property>
	</bean>
	
	<util:map id="tableAliases">
		<entry key="node" value="facts"/>
		<entry key="node_annotation" value="facts"/>
		<entry key="rank" value="facts"/>
		<entry key="component" value="facts"/>
		<entry key="edge_annotation" value="facts"/>
	</util:map>
	
	<util:map id="columnAliases">
		<entry key="rank">
			<util:map>
				<entry key="component_ref" value="component_id"/>
			</util:map>
		</entry>
		<entry key="node_annotation">
			<util:map>
				<entry key="node_ref" value="id"/>
				<entry key="namespace" value="node_annotation_namespace"/>
				<entry key="name" value="node_annotation_name"/>
				<entry key="value" value="node_annotation_value"/>
			</util:map>
		</entry>
		<entry key="component">
			<util:map>
				<entry key="name" value="edge_name"/>
				<entry key="namespace" value="edge_namespace"/>
			</util:map>
		</entry>
		<entry key="edge_annotation">
			<util:map>
				<entry key="namespace" value="edge_annotation_namespace"/>
				<entry key="name" value="edge_annotation_name"/>
				<entry key="value" value="edge_annotation_value"/>
			</util:map>
		</entry>
	</util:map>
	
	<bean id="tableAccessStrategy" class="annis.sqlgen.TableAccessStrategy" scope="prototype">
		<property name="tableAliases" ref="tableAliases"/>
		<property name="columnAliases" ref="columnAliases"/>
	</bean>
	
	<bean id="subQueryCorpusSelectionStrategy" class="annis.sqlgen.SubQueryCorpusSelectionStrategy"/>
	
	<bean id="corpusSelectionByViewTableAccessStrategy" class="annis.sqlgen.CorpusSelectionByViewTableAccessStrategy">
		<property name="tableAliases" ref="tableAliases"/>
		<property name="columnAliases" ref="columnAliases"/>
		<property name="nodeTableViewName" value="node_v"/>
		<property name="subQueryCorpusSelectionStrategy" ref="subQueryCorpusSelectionStrategy"/>
	</bean>

	<bean id="corpusSelectionByViewByDocumentTableAccessStrategy" class="annis.sqlgen.CorpusSelectionByViewByDocumentTableAccessStrategy">
		<property name="tableAliases" ref="tableAliases"/>
		<property name="columnAliases" ref="columnAliases"/>
		<property name="nodeTableViewName" value="node_v"/>
		<property name="subQueryCorpusSelectionStrategy" ref="subQueryCorpusSelectionStrategy"/>
	</bean>

	<bean id="tableAccessStrategyFactory" class="annis.sqlgen.TableAccessStrategyFactory">
		<lookup-method name="createTableAccessStrategy" bean="corpusSelectionByViewByDocumentTableAccessStrategy"/>
	</bean>
	
	<bean id="queryAnalysis" class="annis.ql.parser.QueryAnalysis">
		<property name="dnfTransformer" ref="dnfTransformer"/>
		<lookup-method name="getClauseAnalysis" bean="clauseAnalysis"/>
	</bean>
	
	<!-- SqlGenerator: generates a SQL statement for a DDDquery -->
	<bean id="findSqlGenerator" class="annis.sqlgen.SqlGenerator">
		<property name="clauseSqlGenerator" ref="findClauseSqlGenerator"/>
		<property name="queryAnalysis" ref="queryAnalysis"/>
	</bean>
	
	<!-- SqlGenerator: generates a SQL statement for a DDDquery -->
	<bean id="countSqlGenerator" class="annis.sqlgen.SqlGenerator">
		<property name="clauseSqlGenerator" ref="countClauseSqlGenerator"/>
		<property name="queryAnalysis" ref="queryAnalysis"/>
	</bean>
	
</beans>
