Package annis.ql;

Helpers
	blank = ' ' | 10 | 13;

	wildcards = '*' | '?';	
	regexp_chars = '*' | '+' | '?' | '(' | ')' | '[' | ']' | '|';
	
	digit = [ '0' .. '9' ];
	alpha = [ 'A' .. 'Z' ] | [ 'a' .. 'z' ] ;
	allowed_start = alpha | '_' | '-' | wildcards;
	allowed_tail = allowed_start | digit | '.' ;
	
	any = [ 0 .. 0xffff ];

	not = ( 'n' | 'N' ) ( ( 'o' | 'O' ) | ( 'i' | 'I' ) ( 'c' | 'C' ) ( 'h' | 'H' ) ) ( 't' | 'T' ) ;
	and = ( 'a' | 'A' | 'u' | 'U' ) ( 'n' | 'N' ) ( 'd' | 'D' ) ;
	or = ( 'o' | 'O' ) ( ( 'd' | 'D' ) ( 'e' | 'E' ) )? ( 'r' | 'R' ) ;
	xor = ( 'x' | 'X' ) ( 'o' | 'O' ) ( 'r' | 'R' ) ;
	either = ( 'e' | 'E' ) ( 'i' | 'I' ) ( 't' | 'T' ) ( 'h' | 'H' ) ( 'e' | 'E' ) ( 'r' | 'R' ) |
			 ( 'e' | 'E' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'w' | 'W' ) ( 'e' | 'E' ) ( 'd' | 'D' ) ( 'e' | 'E' ) ( 'r' | 'R') ;

States
	default, regular_text, regexp_text;

Tokens
	{default} blanks = blank+;
	
	{default -> regular_text} regular_l_quote = '"';
	{regular_text} text = [ any - '"' ]+;
	{regular_text -> default} regular_r_quote = '"';
	
	{default -> regexp_text} regexp_l_quote = '/';
	{regexp_text} regexp = [ any - '/' ]+;
	{regexp_text -> default} regexp_r_quote = '/';
	
	{default} and = '&' | '&&' | and ;
	{default} or = '|' | '||' | or ;
	{default} xor = '^' | xor ;
	{default} not = '!' | not ;
	{default} either = either ;
	
	{default} meta = 'meta' ;
	
	// only allow normal parens in annis 2.0
	{default} l_par = '(';
	{default} r_par = ')';
	
	// use brackets to specify edge dominance
	{default} l_brack = '[';
	{default} r_brack = ']';
	
	{default} op_root = ':root';
	{default} op_arity = ':arity';
	{default} op_token_arity = ':tokenarity';
	
	{default} hash = '#';
	{default} digits = digit+;
	{default} equal = '=';
	{default} comma = ',';
	{default} star = '*';	
	{default} colon = ':';
	{default} doublecolon = '::';
	
	{default} op_exact_overlap = '_=_';
	{default} op_left_align = '_l_';
	{default} op_right_align = '_r_';
	{default} op_inclusion = '_i_';
	{default} op_left_overlap = '_ol_';
	
	{default} op_precedence = '.';
	
	{default} op_pointing_relation = '->';
	
	{default} op_dominance = '>';
	{default} left_dominance = '@l';
	{default} right_dominance = '@r';
	
	{default} op_sibling = '$';
	{default} op_sibling_and_precedence = '$.*';
	
	{default} op_same_annotation_group = '@';
	
	{default} doc = 'doc' | 'dok';
	
	{default} id = allowed_start allowed_tail*;
	
Ignored Tokens
	blanks;
	
Productions

	expr { -> expr } = or_expr { -> or_expr.expr };

	or_expr { -> expr } =
	      and_expr { -> and_expr.expr }
		| {or} and_expr or_tail+ { -> New expr.or( [ and_expr.expr, or_tail.expr ] ) }
		;
		
	or_tail { -> expr } = or and_expr { -> and_expr.expr };
		
	and_expr { -> expr } =
		  term { -> term.expr }
		| {and} term and_tail+ { -> New expr.and( [ term.expr, and_tail.expr ] ) }
		;
		
	and_tail { -> expr } = and term { -> term.expr };
		
	term { -> expr } = 
		  {search}	search_term { -> search_term.expr } 
		| {document_constraint} doc equal text_spec { -> New expr.document_constraint(text_spec) }
		| {meta_constraint} meta doublecolon anno_namespace? [anno_type]:id anno_value { -> New expr.meta_constraint(anno_namespace.id, anno_type, anno_value.text_spec) }
		| {linguistic_term}	linguistic_term { -> linguistic_term.expr } 
		| {grouped} grouped { -> grouped.expr }
		| {implicit_and} [head]:grouped [tail]:grouped+ { -> New expr.implicit_and( [ head.expr, tail.expr ] ) } 
		;
		
	grouped { -> expr } =
		l_par expr r_par { -> expr } ;

	search_term { -> expr } = 
		  {annotation} anno_namespace? [anno_type]:id anno_value?  { -> New expr.annotation_search(anno_namespace.id, anno_type, anno_value.text_spec) } 
		| {text} text_spec { -> New expr.text_search(text_spec) } 
		;
	
	anno_namespace { -> id } =
		  [namespace]:id colon { -> namespace }
		;
		
	anno_value { -> text_spec } = 
		  equal [anno_value]:text_spec { -> anno_value }
		;
		
	text_spec { -> text_spec } = 
		  {regular}	regular_l_quote text regular_r_quote { -> New text_spec.wild(text) } 
		| {regexp}	regexp_l_quote regexp regexp_r_quote { -> New text_spec.regexp(regexp) } 
		;
			
	linguistic_term { -> expr } =
		  {unary} pattern_ref unary_op { -> New expr.linguistic_constraint(unary_op.ling_op, pattern_ref.digits, Null) } 
		| {binary} [lhs]:pattern_ref binary_op [rhs]:pattern_ref { -> New expr.linguistic_constraint(binary_op.ling_op, lhs.digits, rhs.digits) } 
		;
		
	pattern_ref { -> digits } = 
		hash digits { -> digits } ;
	
	binary_op { -> ling_op } = 
		  {exact_overlap}	op_exact_overlap { -> New ling_op.exact_overlap() } 
		| {left_align}	op_left_align { -> New ling_op.left_align() }
		| {right_align}	op_right_align { -> New ling_op.right_align() }
		| {inclusion}	op_inclusion { -> New ling_op.inclusion() }
		| {left_overlap}	op_left_overlap { -> New ling_op.left_overlap() }
		| {precedence_direct}	op_precedence { -> New ling_op.precedence(New precedence_spec.direct()) } 
		| {precedence}	op_precedence precedence_spec { -> New ling_op.precedence(precedence_spec) } 
		| {dominance_direct}	op_dominance [name]:id? { -> New ling_op.dominance(New dominance_spec.direct(name)) }
		| {dominance}	op_dominance dominance_spec { -> New ling_op.dominance(dominance_spec) }
		| {sibling}	op_sibling { -> New ling_op.sibling() }
		| {sibling_and_precedence}	op_sibling_and_precedence { -> New ling_op.sibling_and_precedence() }
		| {same_annotation_group}	op_same_annotation_group { -> New ling_op.same_annotation_group() }
		| {pointing_relation_direct}	op_pointing_relation [name]:id edge_spec? { -> New ling_op.pointing_relation( New pointing_relation_spec.direct(name, edge_spec) ) }
		| {poinging_relation_indirect}	op_pointing_relation [name]:id star { -> New ling_op.pointing_relation( New pointing_relation_spec.indirect(name) ) }
		;

	unary_op { -> ling_op } = 
		  {root} op_root { -> New ling_op.root() } 
		| {arity} op_arity equal range_spec { -> New ling_op.arity(range_spec) }
		| {token_arity} op_token_arity equal range_spec { -> New ling_op.token_arity(range_spec) }
		;

	range_spec { -> range_spec } = 
		  {single}	[num]:digits { -> New range_spec(num, Null) } 
		| {range}	[min]:digits comma [max]:digits { -> New range_spec(min, max) } 
		;
	
	precedence_spec { -> precedence_spec } =
		  {range}	range_spec { -> New precedence_spec.range(range_spec) } 
		| {indirect}	star { -> New precedence_spec.indirect() }
		;

	dominance_spec { -> dominance_spec } = 
		  {range}	[name]:id? range_spec { -> New dominance_spec.range(name, range_spec) } 
		| {indirect}	[name]:id? star { -> New dominance_spec.indirect(name) }
		| {edge}	[name]:id? edge_spec { -> New dominance_spec.edge(name, edge_spec) }
		| {left_leaf}	left_dominance { -> New dominance_spec.left_leaf() }
		| {right_leaf}	right_dominance { -> New dominance_spec.right_leaf() }
		;
		
	edge_spec { -> edge_spec } =
		  l_brack edge_annotation+ r_brack { -> New edge_spec( [ edge_annotation ] ) }
		;
		
	edge_annotation { -> edge_annotation } = 
		  anno_namespace? [anno_type]:id anno_value? { -> New edge_annotation(anno_namespace.id, anno_type, anno_value.text_spec) }
		;
		
Abstract Syntax Tree

	expr =
		  {annotation_search} [anno_namespace]:id? [anno_type]:id [anno_value]:text_spec? 
		| {text_search} text_spec 
		| {any_node_search}
		| {grouped} expr
		| {implicit_and} expr*
		| {linguistic_constraint} ling_op [lhs]:digits [rhs]:digits? 
		| {document_constraint} [name]:text_spec
		| {meta_constraint} [namespace]:id? [name]:id [value]:text_spec
		| {or} expr+
		| {and} expr+
		;
		
	text_spec = 
		  {wild} text 
		| {regexp} regexp 
		;
				
	ling_op =
		// unary
		  {root} 
		| {arity} range_spec
		| {token_arity} range_spec
		
		// binary
		| {exact_overlap}
		| {left_align} 
		| {right_align}
		| {inclusion} 
		| {left_overlap} 
		| {precedence} precedence_spec 
		| {dominance} dominance_spec
		| {sibling} 
		| {sibling_and_precedence} 
		| {same_annotation_group} 
		| {pointing_relation} pointing_relation_spec
		;
		
	range_spec = [min]:digits [max]:digits? ;
		
	precedence_spec = 
		  {direct}
		| {indirect}
		| {range} range_spec
		;
		
	dominance_spec = 
		  {direct} [name]:id?
		| {indirect} [name]:id?
		| {range} [name]:id? range_spec
		| {edge} [name]:id? edge_spec
		| {left_leaf}
		| {right_leaf}
		;
	
	pointing_relation_spec =
		  {direct} [name]:id edge_spec?
		| {indirect} [name]:id
		;
		
	edge_spec = edge_annotation+ ;
	
	edge_annotation =  [namespace]:id? [type]:id [value]:text_spec? ;