<?xml version="1.0" encoding="UTF-8"?>

<project name="Annis (refactoring)" basedir=".">

	<property file="build.properties"/>
	
	<target
		name="clean"
		description="-> clean up the project"
		>
		
		<delete dir="${build.dir}"/>
		<delete dir="${sablecc.src.dir}"/>
		<delete file="${annis.jar.file}"/>
		<delete dir="${dist.dir}"/>
		<delete file="${annis.zip.file}"/>
		<delete dir="${annis.dir}"/>
		<delete file="${rmi.service.jar}"/>
		<delete file="${rmi.objects.jar}"/>
		
	</target>
	
	<target
		name="init"
		description="-> initializes the build environment">
	
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${sablecc.src.dir}"/>
	</target>
	
	<path id="build.path">
		<pathelement location="${build.dir}"/>
		<path>
			<fileset dir="${lib.runtime.dir}" includes="*.jar"/>
			<fileset dir="${lib.compile.dir}" includes="*.jar"/>
		</path>
	</path>
	
	<target
		name="build"
		description="-> builds the source"
		depends="init">
		
		<javac srcdir="${sablecc.src.dir}"
         destdir="${build.dir}"
		 debug="on"
         classpathref="build.path"/>
		
		<javac srcdir="${java.src.dir}"
         destdir="${build.dir}"
		 debug="on"
         classpathref="build.path"/>
		
		<!-- copy spring xml and sablecc parser files and text resources -->
		<copy todir="${build.dir}">
			<fileset dir="${java.src.dir}" includes="**/*.xml"/>
			<fileset dir="${sablecc.src.dir}" includes="**/*.dat"/>
			<fileset dir="${java.src.dir}" includes="**/*.txt"/>
		</copy>
		
	</target>
	
	<target
		name="create-jar"
		depends="build"
		description="-> creates a jar file for Annis">
	
		<jar basedir="${build.dir}" destfile="${annis.jar.file}"/>
	</target>
	
	<target
		name="create-rmi-jars"
		description="-> create jar files with RMI classes"
		depends="annis-rmi-objects.jar,annis-rmi-service.jar"/>
	
	<target
		name="dist"
		description="-> creates a zip-file for distribution"
		depends="create-jar,create-rmi-jars"
		>
		
		<mkdir dir="${dist.dir}"/>
		
		<!-- copy libs -->
		<mkdir dir="${dist.lib.dir}"/>
		<copy file="${annis.jar.file}" todir="${dist.lib.dir}"/>
		<copy todir="${dist.lib.dir}">
			<fileset dir="${lib.runtime.dir}" includes="*.jar"/>
		</copy>
		
		<!-- copy binaries -->
		<mkdir dir="${dist.dir}"/>
		<copy todir="${dist.bin.dir}">
			<fileset dir="${bin.dir}"/>
		</copy>
		
		<!-- copy scripts -->
		<mkdir dir="${dist.scripts.dir}"/>
		<copy todir="${dist.scripts.dir}">
			<fileset dir="${script.dir}"/>
		</copy>
		
		<!-- copy configuration -->
		<mkdir dir="${dist.conf.dir}"/>
		<copy todir="${dist.conf.dir}">
			<fileset dir="${conf.defaults.dir}"/>
		</copy>
		
		<!-- change database.properties permissions -->
		<chmod perm="600" file="${dist.conf.dir}/database.properties" verbose="true"/>
		
		<!-- copy annis-rmi-service.jars -->
		<mkdir dir="${dist.rmi-export.dir}"/>
		<copy file="${rmi.service.jar}" todir="${dist.rmi-export.dir}"/>
		<copy file="${rmi.objects.jar}" todir="${dist.rmi-export.dir}"/>
		
		<!-- make dirs: log, var, dot, extData -->
		<mkdir dir="${dist.var.dir}"/>
		<mkdir dir="${dist.log.dir}"/>
		<mkdir dir="${dist.dot.dir}"/>
		<mkdir dir="${dist.extData.dir}"/>
		
		<!-- change permissions on shell scripts -->
		<chmod perm="u+x" dir="${dist.bin.dir}" includes="*.sh" verbose="true"/>
		
		<!-- create zip files -->
		<tar destfile="${annis.tgz.file}" compression="gzip">
			<tarfileset dir="${dist.dir}" prefix="annis">
				<include name="**"/>
				<exclude name="bin/**"/>
			</tarfileset>
			<tarfileset dir="${dist.dir}" mode="744" prefix="annis">
				<include name="bin/**"/>
			</tarfileset>
		</tar>

	</target>
	
	<target
		name="build-parsers"
		depends="init,build-dddquery-parser, build-annisql-parser"
		description="-> builds the DDDquery and ANNIS-QL parser"
	/>
	
	<target
		name="delete-dddquery-generated-files"
		description="-> removes generated analysis, lexer, node, and parser-packages">
		
		<delete dir="${dddquery.parser.src.dir}"/>
		
	</target>
	
	<target
		name="build-dddquery-parser"
		depends="delete-dddquery-generated-files"
		description="-> builds the dddquery parser from the SableCC definition file">
		
		<java
			classname="org.sablecc.sablecc.SableCC"
			classpath="${lib.compile.dir}/sablecc.jar"
			fork="true"
			failonerror="true"
			>
			
			<arg value="-d"/>
			<arg value="${sablecc.src.dir}"/>
			<arg value="${dddquery.grammar.file}"/>
		
		</java>
		
		<exec executable="patch" input="dddQuery.Node.java.cloneList.patch">
			<arg value="-p0"/>
		</exec>
			
	</target>

	<target
		name="delete-annisql-generated-files"
		description="-> removes generated analysis, lexer, node, and parser-packages">
		
		<delete dir="${annisql.parser.src.dir}"/>
	</target>
	
	<target
		name="build-annisql-parser"
		depends="delete-annisql-generated-files"
		description="-> builds the annisql parser from the SableCC definition file">
		
		<java
			classname="org.sablecc.sablecc.SableCC"
			classpath="${lib.compile.dir}/sablecc.jar"
			fork="true"
			failonerror="true"
			>
			
			<arg value="-d"/>
			<arg value="${sablecc.src.dir}"/>
			<arg value="${annisql.grammar.file}"/>
			
		</java>
		
		<exec executable="patch" input="annisQl.Node.java.cloneList.patch">
			<arg value="-p0"/>
		</exec>
			
	</target>

	<target
	  name="annis-rmi-service.jar"
	  description="-> creates service jar needed for client">
	   
	  <jar
	   destfile="annis-rmi-service-1.0.jar"
	   basedir="classes/"
	   includes="annis/service/AnnisService.class annis/service/AnnisServiceFactory.class annis/service/AnnisServiceException.class annis/exceptions/* annis/service/ifaces/*"/>    
	 </target>

	<target
	  name="annis-rmi-objects.jar"
	  description="-> creates service jar needed for client">
	   
	  <jar
	   destfile="annis-rmi-objects-1.0.jar"
	   basedir="classes/"
	   includes="annis/service/objects/*.class annis/model/*.class annis/sqlgen/model/*.class"/>    
	 </target>	
	
</project>