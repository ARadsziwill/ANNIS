<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
    <info>
        <title>ANNIS User Guide</title>
        <author>
            <personname>
                <firstname>Amir</firstname>
                <surname>Zeldes</surname>
            </personname>
            <email>annis-admin@ling.uni-potsdam.de</email>
        </author>
        <orgname>SFB 632 Information Structure / D1 Linguistic Database</orgname>
        <orgname>Humboldt-Universität zu Berlin &amp; Universität Potsdam</orgname>
        <releaseinfo>Version 2.2.1</releaseinfo>
        <pubdate>18 April 2012</pubdate>
    </info>

    <section>
        <title>Introduction</title>
        <para>ANNIS is an open source, browser-based search and visualization architecture for
            multi-layer corpora. It can be used to search for complex graph structures of annotated
            nodes and edges forming a variety of linguistic structures, such as constituent or
            dependency syntax trees, coreference and parallel alignment edges, span annotations and
            associated multi-modal data (audio/video). This guide provides an overview of the
            current ANNIS system, first steps for installing either a local instance or an ANNIS
            server with a demo corpus, as well as tutorials for converting data for ANNIS and
            running queries with AQL (ANNIS Query Language). </para>
    </section>

    <section>
        <title>New Features in Version 2.2.1</title>
        <para>
            <emphasis role="bold">Features:</emphasis>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Subcorpus and document path for each hit can be shown in search result
                        list</para>
                </listitem>
                <listitem>
                    <para>Metadata coming from documents, subcorpora and top level corpora is sorted
                        separately in the metadata display</para>
                </listitem>
                <listitem>
                    <para>New grid-tree visualizer for a span visualization of hierarchical
                        structures (e.g. topological fields in German; see Section
                        5.1)<!-- TODO reference --></para>
                </listitem>
                <listitem>
                    <para>More intuitive search button position in GUI and other small GUI
                        improvements</para>
                </listitem>
                <listitem>
                    <para>Updated tutorial</para>
                </listitem>
                <listitem>
                    <para>Faster import when large corpora are already in the system</para>
                </listitem>
            </itemizedlist>
            <emphasis role="bold">Bugfixes:</emphasis>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Support for JDK 7</para>
                </listitem>
                <listitem>
                    <para>Fixed import bug which could disrupt queries of the sort >secedge m,n (see
                            <link xlink:href="https://bugs.launchpad.net/bugs/870108"
                            >https://bugs.launchpad.net/bugs/870108</link>) </para>
                </listitem>
                <listitem>
                    <para>Fixed bugs in some forms of query disjunction with ‘|’</para>
                </listitem>
                <listitem>
                    <para>Fixed resizing of visualizers in Chrome browsers</para>
                </listitem>
                <listitem>
                    <para>Fixed escaping of characters in WEKA export</para>
                </listitem>
            </itemizedlist> (For change logs of previous version see their respective distributions
            or user guides) </para>
    </section>

    <section>
        <title>Installing <application>ANNIS</application></title>

        <section>
            <title>Installing a Local Version (ANNIS Kickstarter)</title>
            <para> Local users who do not wish to make their corpora available online can install
                ANNIS Kickstarter under most versions of Linux, Windows and Mac OS. To install
                Kickstarter follow these steps:<orderedlist>
                    <listitem>
                        <para>Download and install PostgreSQL 8.4 for your operating system from
                                <link xlink:href="http://www.postgresql.org/download/"
                                >http://www.postgresql.org/download/</link> and <emphasis
                                role="bold">make a note of the administrator password</emphasis> you
                            set during the installation. After installation, Postgres may
                            automatically launch the Postgres Stack Builder to download additional
                            components – you can safely skip this step and cancel the Stack Builder
                            if you wish. You may need to restart your OS if the Postgres installer
                            tells you to. </para>
                    </listitem>
                    <listitem>
                        <para>Download and unzip <link
                                xlink:href="http://launchpad.net/annis/2.2/2.2.1/+download/Annis-Kickstarter-2.2.1-distribution.zip"
                                >Annis-Kickstarter-2.2.1-distribution.zip</link> from the ANNIS
                            website. </para>
                    </listitem>
                    <listitem>
                        <para>Start AnnisKickstarter.bat if you’re using Windows or run the bash
                            script AnnisKickstarter.sh otherwise (this may take a few seconds the
                            first time you run Kickstarter). At this point your Firewall may try to
                            block Kickstarter and offer you to unblock it – do so and Kickstarter
                            should start up. </para>
                        <note>
                            <para>For most users it is a good idea to give Java more memory (if this
                                is not already the default). You can do this by editing the script
                                AnnisKickstarter and typing the following after the call to start
                                java (before -splash:splashscreen.gif): </para>
                            <para><code>-Xss1024k -Xmx1024m</code></para>
                            <para>(To accelerate searches it is also possible to give the Postgres
                                database more memory, see the link in the next section below).
                            </para>
                        </note>
                    </listitem>
                    <listitem>
                        <para>Once the program has started, if this is the first time you run
                            Kickstarter, press “Init Database” and supply your PostGres
                            administrator password from step 1. </para>
                    </listitem>
                    <listitem>
                        <para>Download and unzip the <link
                                xlink:href="http://korpling.german.hu-berlin.de/~annis/downloads/sample_corpora/pcc2_relAnnis.zip"
                                >pcc2 demo corpus</link> from the ANNIS website. </para>
                    </listitem>
                    <listitem>
                        <para>Press “Import Corpus” and navigate to the directory containing the
                            directory <filename>pcc2_v2_relAnnis/</filename>. Select this directory
                            (but do not go into it) and press OK. </para>
                    </listitem>
                    <listitem>
                        <para>Once import is complete, press “Launch Annis frontend” and login with
                            the username and password “test” to test the corpus (try selecting the
                            pcc2 corpus, typing <code>pos="NN"</code> in the AnnisQL box and
                            clicking “Show Result”. See the section “Running Queries in
                                <application>ANNIS</application>” in this guide for some more
                            example queries, or press the Tutorial button at the top left of the
                            interface). </para>
                    </listitem>
                </orderedlist></para>

        </section>
        <section>
            <title>Building and Installing an ANNIS Server</title>
            <para>The ANNIS server version can be installed on UNIX based server, or else under
                Windows using <link xlink:href="http://www.cygwin.com/">Cygwin</link>, the freely
                available UNIX emulator. To install the ANNIS server: <orderedlist>
                    <listitem>
                        <para>Install a PostgreSQL server for your operating system from <link
                                xlink:href="http://www.postgresql.org/download/"
                                >http://www.postgresql.org/download/</link>
                        </para>
                        <para>Make note of the postgres password. Under linux, you will have to set
                            the postgres manually. You can achieve this with running the following
                            commands:</para>
                        <para>
                            <programlisting>sudo -u postgres psql
\password
\q</programlisting></para>
                    </listitem>
                    <listitem>
                        <para>Install a web server such as <link
                                xlink:href="http://tomcat.apache.org/">Tomcat</link> or <link
                                xlink:href="http://www.mortbay.org/jetty/">Jetty</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Make sure you have <link
                                xlink:href="http://java.sun.com/javase/downloads/index.jsp">JDK
                                6</link> and <link xlink:href="http://maven.apache.org/">Maven
                                2</link> (or install them if you don’t) </para>
                    </listitem>
                    <listitem>
                        <para>If you’re using Cygwin and Windows you will also need to install the
                            “patch” program via the Cygwin package manager </para>
                    </listitem>
                    <listitem>
                        <para>Download and unzip <link
                                xlink:href="http://launchpad.net/annis/2.2/2.2.1/+download/Annis-2.2.1.zip"
                                >Annis-2.2.1.zip</link>, then run the following commands (replacing
                            the appropriate directories):</para>
                        <para>
                            <programlisting>cd &lt;unzipped source>/Annis-Service
mvn -DskipTests=true install 
mvn -DskipTests=true assembly:assembly tar xzvf
target/annis-service-&lt;version>-distribution.tar.gz -C &lt;installation directory&gt;            </programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Set the environment variables (each time when starting up) </para>
                        <para>
                            <programlisting>export ANNIS_HOME=&lt;installation directory>
export PATH=$PATH:$ANNIS_HOME/bin</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Next initialize your ANNIS database (only the first time you use the
                            system):</para>
                        <programlisting>annis-admin.sh init -u &lt;username> -d &lt;dbname> -p  &lt;password> -P &lt;postgres password></programlisting>
                    </listitem>
                    <listitem>
                        <para>Now you can import some corpora: </para>
                        <para>
                            <programlisting>annis-admin.sh import path/to/corpus1 path/to/corpus2 ...</programlisting>
                        </para>
                        <para>
                            <important>
                                <para>The above import-command calls other PostgreSQL database
                                    commands. If you abort the import script with Ctrl+C, these SQL
                                    processes will not be automatically terminated; instead they
                                    might keep hanging and prevent access to the database. The same
                                    might happen if you close your shell before the import script
                                    terminates, so you will want to prefix it with the
                                    "nohup"-command. </para>
                            </important>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Now you can start the ANNIS service: </para>
                        <para>
                            <programlisting>annis-service.sh start</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>To get the Annis front-end running, first compile it: </para>
                        <para>
                            <programlisting>cd &lt;unzipped source>
mvn -DskipTests=true install</programlisting>
                        </para>
                        <para>If no error occurs the war-file will be available under 4
                                <filename>&lt;unzipped
                                source>/Annis-web/target/Annis-web.war</filename>. </para>
                    </listitem>
                    <listitem>
                        <para>And configure your web server as described here: <link
                                xlink:href="https://korpling.german.hu-berlin.de/p/projects/annis/wiki/Tomcat "
                                >https://korpling.german.hu-berlin.de/p/projects/annis/wiki/Tomcat
                            </link></para>
                    </listitem>
                </orderedlist></para>
            <para>The latest instructions for compiling and installing the ANNIS Server can also be
                found at: <link
                    xlink:href="https://korpling.german.hu-berlin.de/p/projects/annis/wiki/Documentation "
                    >https://korpling.german.hu-berlin.de/p/projects/annis/wiki/Documentation
                </link></para>
            <para>We also <emphasis role="bold">strongly recommend</emphasis> reconfiguring the
                Postgres server’s default settings as described here: <link
                    xlink:href="https://korpling.german.hu-berlin.de/p/projects/annis/wiki/PostgreSQL"
                    >https://korpling.german.hu-berlin.de/p/projects/annis/wiki/PostgreSQL</link>
            </para>
        </section>
    </section>

    <section>
        <title>Running Queries in ANNIS</title>
        <section>
            <title>The ANNIS Interface</title>
            <figure xml:id="img_main-gui">
                <title>ANNIS interface</title>
                <screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/main_gui.png" width="100%"/>
                        </imageobject>
                    </mediaobject>
                </screenshot>
            </figure>

            <para>The ANNIS interface (see <xref linkend="img_main-gui"/>) is comprised of several
                windows, the most important of which are the search form (in the red box above left)
                and the results window (in the blue box above).</para>

            <section>
                <title>The Search Form</title>



                <para>
                    <screenshot>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/search_form.png" width="30%"
                                    align="center"/>
                            </imageobject>
                        </mediaobject>
                    </screenshot> The Search Form on the left of the interface window is available
                    immediately after login. In the middle, the list of currently available corpora
                    is shown. Using the checkboxes on the left of each corpus, it is possible to
                    select which corpora should be searched in (hold down 'shift' to select multiple
                    corpora simultaneously). If you cannot see a corpus that should be available to
                    you, or else if the corpora list is too cluttered, you may click on "more
                    corpora" to open the corpora window. You may then drag and drop the desired or
                    unwanted corpora between the list and the window. </para>

                <para>Pressing the <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/info.png" align="char"/>
                        </imageobject>
                    </inlinemediaobject> button next to a corpus in the list will open the corpus
                    explorer window (see picture below), which shows metadata for the entire corpus
                    on the left and a list of available annotations and example queries on the
                    right. 6 Clicking on a query will copy it to the "AnnisQL" field at the top of
                    the form. Pressing the link icon will give you a citation link that can be used
                    to access the query from any browser. If the corpus contains hierarchical
                    structures, such as dominance edges or pointing relations, there will be
                    separate segments on the right hand side of the corpus explorer to show the
                    available edge names and annotations together with example queries. Clicking on
                    a query will copy it to the "AnnisQL" field at the top of the form. Pressing the
                    link icon will give you a citation link that can be used to access the query
                    from any browser. If the corpus contains hierarchical structures, such as
                    dominance edges or pointing relations, there will be separate segments on the
                    right hand side of the corpus explorer to show the available edge names and
                    annotations together with example queries. <screenshot>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/corpus_explorer.png" width="100%"/>
                            </imageobject>
                        </mediaobject>
                    </screenshot>
                </para>

                <para>The "AnnisQL" field at the top of the form is used for inputting queries
                    manually (see the tutorials on the ANNIS Query Language). As soon as one or
                    several corpora are selected and a query is entered or modified, the query will
                    be validated automatically and possible errors in the query syntax will be
                    commented on in the "Result" box below. When modifying a query, a delay of two
                    seconds ia activated before the query is re-sent to the server for validation. </para>

                <para>Once a valid query has been entered, pressing the "Show Result" button (or
                    using the shortcut ctrl+Enter) will retrieve the number of matching positions in
                    the selected corpora in the Result box and open the Result Window to display the
                    first set of matches. Queries from the current session are saved in the query
                    history and can be accessed using the button underneath the result field. </para>

                <para>The context surrounding the matching expressions in the result list is
                    determined by the "context left" and "context right" options at the bottom of
                    the search form, and can be set to up to 10 tokens on each side, though some
                    corpora allow longer spans, such as entire texts, to be viewed using special
                    discourse visualizations. </para>

            </section>
            <section>
                <title>The Result Window</title>
                <para>The result window shows search results in pages of 10 hits each by default
                    (this can be changed in the Search Form). The toolbar at the top of the window
                    allows you to navigate between these pages. The "Token Annotations" button on
                    the toolbar allows you to toggle 7 the token based annotations, such as lemmas
                    and parts-of-speech, on or off for you convenience. The "Citation URL" button
                    provides a hyperlink which you can e-mail or cite, allowing others to reproduce
                    your query. <screenshot>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/kwic.png" width="70%" align="center"/>
                            </imageobject>
                        </mediaobject>
                    </screenshot> The result list itself initially shows a KWIC (key word in
                    context) concordance of matching positions in the selected corpora, with the
                    matching region marked red and the context in black on either side. Token
                    annotations are displayed in gray under each token, and hovering over them with
                    the mouse will show the annotation name and namespace. More complex annotation
                    levels can be expanded, if available, by clicking on the plus icon next to the
                    level's name, e.g. tiger and exmaralda for the annotations in the tree and grid
                    views in the picture below (circled in red). <screenshot>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/vis.png" width="60%" align="center"/>
                            </imageobject>
                        </mediaobject>
                    </screenshot></para>
            </section>

        </section>
        <section>
            <title>Using the ANNIS Query Builder</title>
            <para>To open the graphical query builder, click on the Query Builder button on the
                Search Form (clicking the button again will close the Query Builder). On the
                left-hand side of the toolbar at the top of the query builder canvas, you will see
                the Create Node button. Use this button to define nodes to be searched for (tokens,
                non-terminal nodes or annotations). Creating nodes and modifying them on the canvas
                will immediately update the AnnisQL field in the Search Form with your query, though
                updating the query on the Search Form will not create a new graph in the Query
                Builder. <screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/qb_button.png" width="60%" align="center"/>
                        </imageobject>
                    </mediaobject>
                </screenshot>
            </para>
            <para> In each node you create you may click on "Add" to specify an annotation value.
                The annotation name can be typed in or selected from a drop down list. The
                "Op[erator]" field in the middle allows you to choose between an exact match (the
                '=' symbol) or wildcard search using Regular Expressions (the '~' symbol). The
                annotation value is given on the right, and should NOT be surrounded by quotations
                (see the example below). It is also possible to specify multiple annotations
                applying to the same position by clicking on "Add" multiple times. Clicking on
                "Clear" will delete the values in the node. To search for word forms, simply leave
                the field name on the left empty and type directly on the right under "Value". A
                node with no data entered will match any node, that is an underspecified token or
                non-terminal node or annotation. <screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/qb_node.png" width="30%" align="center"/>
                        </imageobject>
                    </mediaobject>
                </screenshot></para>

            <para> To specify the relationship between nodes, first click on the "Edge" button at
                the top left of one node, and then click the "Dock" button which becomes available
                on the other nodes. An edge will connect the nodes with an extra box from which
                operators may be selected (see below). For operators allowing additional labels
                (e.g. the dominance operator > allows edge labels to be specified), you may type
                directly into the edge's operator box, as in the example with a "func" label in the
                image below. Note that the node clicked on first (where the "Edge" button was
                clicked) will be the first node in the resulting quey, i.e. if this is the first
                node it will dominate the second node (#1 > #2) and not the other way around, as
                also represented by the arrows along the edge. <screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/qb_graph.png" width="40%" align="center"/>
                        </imageobject>
                    </mediaobject>
                </screenshot>
            </para>
        </section>

        <section>
            <title>Searching for Word Forms</title>
            <para>To search for word forms in ANNIS2, simply select a corpus (in this example the
                small pcc2 demo corpus) and enter a search string between double quotation marks,
                e.g.: <programlisting>"statisch"</programlisting> Note that the search is case
                sensitive, so it will not find cases of capitalized 'Statisch', for example at the
                beginning of a sentence. In order to find both options, you can either look for one
                form OR the other using the pipe sign ( | ):
                <programlisting>"statisch" | "Statisch"</programlisting> or else you can use regular
                expressions, which must be surrounded by slashes ( / ) instead of quotation marks:
                <programlisting>/[Ss]tatisch/</programlisting> To look for a sequence of multiple
                word forms, enter your search terms separated by &amp; and then specify that the
                relation between the elements is one of precedence, as signified by the period ( . )
                operator: <programlisting>"so" &amp; "statisch" &amp; #1 . #2</programlisting> The
                expression #1 . #2 signifies that the first element ("so") precedes the second
                element ("statisch"). For indirect precedence (where other tokens may stand between
                the search terms), use the .* operator:
                <programlisting>/[Ss]o/ &amp; "statisch" &amp; "wie" &amp; #1 . #2 &amp; #2 .* #3</programlisting>
                The above query finds sequences beginning with either "So" or "so", followed
                directly by "statisch", which must be followed either directly or indirectly (.*) by
                "wie". A range of allowed distances can also be specified numerically as follows:
                <programlisting>/[Ss]tatisch/ &amp; "wie" &amp; #1 .1,5 #2</programlisting> Meaning
                the two words may appear at a distance of 1 to 5 tokens. The operator .* allows a
                distance of up to 50 tokens by default, so searching with .1,50 is the same as using
                .* instead. Greater distances (e.g. .1,100 for 'within 100 tokens') should always be
                specified explicitly. Finally, we can add metadata restrictions to the query, which
                filter out documents not matching our definitions. Metadata attributes must be
                preceded by the prefix meta:: and may not be bound (i.e. they are not referred to as
                #1 etc. and the numbering of other elements ignores their existence):
                <programlisting>/[Ss]tatisch/ &amp; "wie" &amp; #1 .1,5 #2 &amp; meta::Genre="Sport"</programlisting>
                To view metadata for a search result or for a corpus, press the "i" icon next to it
                in the result window or in the search form respectively. </para>
        </section>

        <section>
            <title>Searching for Annotations</title>
            <para> Annotations may be searched for using an annotation name and value. The names of
                the annotations vary from corpus to corpus, though many corpora contain
                part-of-speech and lemma annotations with the names pos and lemma respectively
                (annotation names are case sensitive). For example, to search for all forms of the
                German verb sein 'to be' in a corpus with lemma annotation such as pcc2, simply
                select the pcc2 corpus and enter: <programlisting>lemma="sein"</programlisting>
                Negative searches are also possible using != instead of =. For negated tokens (word
                forms) use the reserved attribute tok. For example:
                <programlisting>lemma!="sein"</programlisting> or:
                <programlisting>tok!="ist"</programlisting> Metadata can also be negated similarly:
                <programlisting>lemma="sein" &amp; meta::Genre!="Sport"</programlisting> To only
                find finite forms of this verb in pcc2, use the part-of-speech (pos) annotation
                concurrently, and specify that both the lemma and pos should apply to the same
                element:
                <programlisting>lemma="sein" &amp; pos="VAFIN" &amp; #1 _=_ #2</programlisting> The
                expression #1 _=_ #2 uses the span identity operator to specify that the first
                annotation and the second annotation apply to exactly the same position in the
                corpus. Annotations can also apply to longer spans than a single token: for example,
                in pcc2, the annotation Inf-Stat signifies the information structure status of a
                discourse referent. This annotation can also apply to phrases longer than one token.
                The following query finds spans containing new discourse referents, not previously
                mentioned in the text: <programlisting>exmaralda:Inf-Stat="new"</programlisting> If
                the corpus contains no more than one annotation type named Inf-Stat, the optional
                namespace (in this case exmaralda:) may be dropped; if there are multiple
                annotations with the same name but different namespaces, dropping the namespace will
                find all of those annotations. In order to view the span of tokens to which this
                annotation applies, enter the and click on "Show Result", then open the exmaralda
                annotation level to view the grid containing the span. Further operators can test
                the relationships between potentially overlapping annotations in spans. For example,
                the operator _i_ examines whether one annotation fully contains the span of another
                annotation (the i stands for 'includes'):
                <programlisting>Topic="ab" &amp; Inf-Stat="new" &amp; #1 _i_ #2</programlisting>
                This query finds aboutness topics (Topic="ab") containing information structurally
                new discourse referents. </para>
        </section>

        <section>
            <title>Searching using Regular Expressions</title>
            <para> When searching for word forms and annotation values, it is possible to employ
                wildcards as placeholders for a variety of characters, using Regular Expression
                syntax (see <link xlink:href="http://www.regular-expressions.info/"
                    >http://www.regular-expressions.info/</link> for detailed information). To
                search for wildcards use slashes instead of quotation marks to surround your search
                term. For example, you can use the period (.) to replace any single character:
                <programlisting>tok=/de./</programlisting> This finds word forms such as "der",
                "dem", "den" etc. It is also possible to make characters optional by following them
                with a question mark (?). The following example finds cases of "das" and "dass",
                since the second "s" is optional: <programlisting>tok=/dass?/</programlisting> It is
                also possible to specify an arbitrary number of repetitions, with an asterisk (*)
                signifying zero or more occurrences and a plus (+) signifying at least one
                occurrence. For example, the first query below finds "da", "das", and "dass" (since
                the asterisk means zero or more times the preceding "s"), while the second finds
                "das" and "dass", since at least one "s" must be found:
                <programlisting>tok=/das*/

tok=/das+/</programlisting> It is possible to combine
                these operators with the period operator to mean any number of occurrences of an
                arbitrary character. For example, the query below searches for pos (part-of-speech)
                annotations that begin with "VA", corresponding to all forms of auxiliary verbs. The
                string "VA" means that the result must begin with "VA", the period stands for any
                character, and the asterisk means that 'any character' can be repeated zero or more
                time, as above.<programlisting>pos=/VA.*/</programlisting> This finds both finite
                verbs ("VAFIN") and non-finite ones ("VAINF"). It is also possible to search for
                explicit alternatives by either specifying characters in square brackets or longer
                strings in round brackets separated by pipe signs. The first example below finds
                either "dem" or "der" (i.e. "de" followed by either "m" or "r") while the second
                example finds lemma annotations that are either "sein" or "werden".
                <programlisting>tok=/de[mr]/

lemma=/(sein|werden)/</programlisting> Finally,
                negative searches can be used as usual with the exclamation point, and regular
                expressions can generally be used also in edge annotations. For example, if we
                search for trees (see also Searching for Trees below) where a node dominates another
                node with edges not containing an object, we can use a wildcard to rule out all
                edges labels beginning with "O" for object:
                <programlisting>cat="VP" &amp; cat &amp; #1 >[func!=/O.*/] #2 </programlisting></para>
        </section>

        <section>
            <title>Searching for Trees</title>
            <para> In corpora containing hierarchical structures, annotations such as syntax trees
                can be searched for by defining terminal or none-terminal node annotations and their
                values. A simple search for prepostional phrases in the small pcc2 demo corpus looks
                like this: <programlisting>tiger:cat="PP"</programlisting> If the corpus contains no
                more than one annotation called cat, the optional namespace, in this case tiger:,
                may be dropped. This finds all PP nodes in the corpus. To find all PP nodes directly
                dominating a proper name, a second element can be specified with the appropriate
                part-of-speech (pos) value:
                <programlisting>cat="PP" &amp; pos="NE" &amp; #1 > #2</programlisting> The operator
                > signifies direct dominance, which must hold between the first and the second
                element. Once the Result Window is shown you may open the "tiger" annotation level
                to see the corresponding tree. <screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/tiger_tree.png" width="90%" align="center"/>
                        </imageobject>
                    </mediaobject>
                </screenshot>
            </para>
        </section>

        <section>
            <title>Searching for Pointing Relations – Coreference and Dependencies</title>
            <para>Pointing relations are used to express an arbitrary directed relationship between
                two elements (terminals or non-terminals) without implying dominance or coverage
                inheritance. For instance, in the pcc2 demo corpus, elements in the mmax: namespace
                may point to each other to express coreference or anaphoric relations. The following
                query searches for two np_form annotations, which specify for example whether a
                nominal phrase is pronominal, definite or indefinite.
                <programlisting>mmax:np_form="pper" &amp; 
mmax:np_form="defnp" &amp; 
#1 ->anaphor_antecedent #2</programlisting>
                Using the pointing relation operator -> with the type anaphor_antecedent, the first
                np_form, which should be a personal pronoun (pper), is said to be the anaphor to its
                antecedent, the second np_form, which is definite (defnp). To see a visualization of
                the coreference relations, open the mmax annotation level in the example corpus. In
                the image below, one of the matches for the above query is highlighted in red (die
                Seeburger und einige Groß-Glienicker ... sie ‘the Seeburgers and some
                Groß-Glienickers... they’). Other discourse referents in the text (marked with an
                underline) may be clicked on, causing coreferential chains containing them to be
                highlighted as well. Note that discourse referents may overlap, leading to multiple
                underlines: Die Seeburger ‘the Seeburgers’ is a shorter discourse referent
                overlapping with the larger one (‘the Seeburgers and some Groß-Glienickers’), and
                each referent has its own underline. Annotations of the coreference edges of each
                relation can be viewed by hovering of the appropriate underline. <screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/coreference.png" width="100%" align="center"/>
                        </imageobject>
                    </mediaobject>
                </screenshot>
                Another way to use pointing relations is found in syntactic dependency trees. The queries 
                in this case can use both pointing relation types and annotation, as in the following query:
                <programlisting>pos="VVFIN" &amp; tok &amp; #1 ->dep[func="obja"] #2</programlisting>
                This query searches for a finite verb (with the part-of-speech VVFIN) and a token, with a 
                pointing relation of the type ‘dep’ (for dependency) between the two, annotated with 
                ‘func="obja"’ (the function Object, Accusative). The result can be viewed with the 
                dependency arch visualizer, which shows the verb  gibt ‘gives’ and its object  Wunder 
                ‘miracles’.<screenshot>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="images/dependencies.png" width="30%" align="left"/>
                        </imageobject>
                    </mediaobject>
                </screenshot>
            </para>
        </section>

    </section>

</article>
